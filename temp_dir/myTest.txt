# 关闭ubuntu弹窗错误报告
sudo vim /etc/default/apport
enabled=1改为enabled=0

# 修改ip地址
ifconfig eth0 192.168.14.200 netmask 255.255.255.0

# 查看wifi下的所有设备IP地址
sudo arp-scan -interface wlp5s0 --localnet

# Appimage 版本微信
# https://github.com/JinNiuMengMeng/electron-wechat

# 正则匹配中文
[\u4E00-\u9FFF]

# vim 去掉包含networking的行
%s/.*networking.*\n//g

# ssh
补充ssh -D 代码的事情
可以运行
ssh -D 10023 root@ip
然后在浏览器中设置  sockect  127.0.0.1  10023 代理即可
ssh -qTfnN -D 7070  root@ip     #建立一个通道

# bash_history
: 1558851561:0;git config --global user.name "Xie Zhaoheng"
: 1558852561:0;git config --global user.email 411317572@qq.com
: 1558852562:0;git config --list
: 1558852563:0;git config user.email
: 1558852564:0;git config user.name
: 1558853746:0;xprop WM_CLASS
: 1558859031:0;sudo arp-scan -interface wlp1s0 --localnet
: 1558859046:0;ssh pi@192.168.43.129
: 1558945548:0;sed -r "s/\/tmp\//\/var\/run\//g" aa
: 1559121339:0;sudo dpkg-reconfigure ca-certificates
: 1559207965:0;/home/ubuntu/pyenv/py3env/bin/jupyter-notebook
: 1559808467:0;svn revert --recursive .
: 1559808468:0;svn cp -m "创建新的分支xzh" svn://x.x.x.x/spm-api/branches/dev svn://x.x.x.x/spm-api/branches/xzh
: 1559808469:0;svn merge svn://x.x.x.x/spm-api/branches/xzh
: 1559812678:0;sudo ulimit -SHn 65536
: 1559812808:0;ulimit -n
: 1560151665:0;redis-cli -h 192.168.0.154
: 1560303408:0;telnet 103.118.36.248 -p 80
: 1560758781:0;curl -O -J -L http://oss.dev.youtiankeji.com/csp/cache/domains/certs.tar.gz
: 1560929261:0;ssh -p 63737 root@192.168.0.248
: 1563437206:0;sudo /etc/init.d/networking restart && sudo /etc/init.d/network-manager restart

pip3 install pycrypto

*  *  * *  *   My Command
分 时 日 月 周   要运行的命令
分: 0-59, 第0分-第59分; */2表示每两分钟;
时: 0-23, 第0点-第23点; */5表示每五个小时;
日: 1-31, 第1天-第31天; 2-10表示第2天-第10天;
月: 1-12, 第1月-第12月; 2,10表示第2月和第10月;
周: 0-6, 第0周表示星期天, 1-6表示星期1到星期6;
*: 表示对应的所有时间段;
/:表示每;
-:表示一个时间段
,:表示和


登录 crondtab 表单 $ crontab -e
查看表单任务列表 $ crontab -l

# 每分钟打印一行 This is a test ! 输出到文件
* * * * * echo -e "This is a test !" > /home/ubuntu/Documents/output/test.out

# 每天凌晨1点清空 lastlog 文件
* 1 * * * echo /dev/null > /var/log/lastlog

# 每一秒执行一次脚本
* * * * * sleep 1 && /home/scripts.sh

* * * * * /home/echoDemo.sh
echoDemo.sh 脚本内容为:

#!/bin/bash
for((i=0; i<=50;i++));do
    echo $i >> ~/Documents/cront/output/test.out
    sleep 1
done
---------flameshot-------------
/usr/bin/flameshot gui -p /home/ubuntu/Documents/share/pic

-------------ubuntu编译安装python27---------------
./configure --prefix=路径

如果报错 zipimport.ZipImportError: can't decompress data; zlib not available
解决方法: $ sudo apt-get install zlib1g-dev

报错Can’t connect to HTTPS URL because the SSL module is not available
解决办法: $ sudo apt-get install libssl-dev openssl

libmysqlclient-dev mysql-dev python-dev python-mysqldb libssl-dev

http://archive.cloudera.com/cdh5/cdh/5/

---------------config--------------------
{
    "font_face": "Courier New",
    "font_size": 13,
    "ignored_packages":
    [
        "Vintage"
    ],
    "theme": "Default.sublime-theme",
    "word_wrap": true
}
[   
    { "keys": ["ctrl+d"], "command": "duplicate_line" },
    { "keys": ["shift+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line.sublime-macro"} },
]


---------------localhost------------------
/home/ubuntu/Env/myPy3/bin/uwsgi --ini /home/ubuntu/PycharmProjects/logFilter/uwsgi/uwsgi.ini

---------------server-------------------
# ---- 手动启动测试 ----
/usr/local/python3/py3env/bin/uwsgi --ini /opt/logFilter/uwsgi/uwsgi.ini

# ---- supervisord 启动命令 ----
/usr/local/python3/py2env/bin/python2 /usr/local/python3/py2env/bin/supervisord -c /usr/local/python3/supervisor/supervisord.conf

# ---- supervisorctl 控制命令 ----
/usr/local/python3/py2env/bin/supervisorctl status`|start`|stop`|restart
/usr/local/python3/py2env/bin/supervisorctl -c /usr/local/python3/supervisor/supervisord.conf

# ---- 关闭 supervisord 与 uwsgi, 并删掉 supervisor.sock 否则无法启动 ----
ps -aux `| grep "supervisord" `|grep -v grep`| cut -c 9-15 `| xargs kill -9; ps -aux `| grep "uwsgi" `|grep -v grep`| cut -c 9-15 `| xargs kill -9; rm -rf /tmp/supervisor.sock; rm -rf /opt/logFilter/uwsgi/uwsgi.pid

scp /home/ubuntu/PycharmProjects/LuQiao/parking2.0/ice_feature/7_Ice_test/clientiCatBo7.py root@192.168.14.137:/opt/

# ----- uwsgi.ini 文件启动 ------
/home/ubuntu/Env/parkingPy27env/bin/uwsgi --ini /home/ubuntu/PycharmProjects/LuQiao/parking2.0/uwsgi/uwsgi.ini

# ----- gunicorn 命令启动 -------
/home/ubuntu/Env/parkingPy27env/bin/gunicorn --chdir "/home/ubuntu/PycharmProjects/LuQiao/parking2.0" -w 1 -b 0.0.0.0:8000 manage:appWeb --worker-class eventlet --log-level debug --backlog 2000 --access-logfile "/home/ubuntu/PycharmProjects/LuQiao/parking2.0/gunicorn/access.log" --error-logfile "/home/ubuntu/PycharmProjects/LuQiao/parking2.0/gunicorn/error.log"

# ----- gunicorn 指定文件启动 -------
/home/ubuntu/Env/parkingPy27env/bin/gunicorn manage:appWeb -c /home/ubuntu/PycharmProjects/LuQiao/parking2.0/gunicorn/gunicorn.conf

ssh -6 root@2001:19f0:5:3c79:5400:01ff:fed7:93dc%wlp5s0


pip2 install -i https://pypi.douban.com/simple/ flask_socketio
pip2 install -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com  包名

pip3 list --format=columns


https://pvp.qq.com/cp/a20161115tyf/page1.shtml


UPDATE yilu_park.usr_privilege SET url=REPLACE(url, '替换前的值', '替换后的值') WHERE code LIKE "3455-01-01%";
UPDATE yilu_park.usr_privilege SET name='添加', menu_label='添加', target=NULL, remarks=NULL, modify_time=NULL WHERE (code='1aaad2af09c5f7dbe718014f4626a6b8');

# scp 指定端口
scp -P 63737 -r xxx root@192.168.0.151:/usr/local/spm-api/

# 重启网络
sudo /etc/init.d/networking restart && sudo /etc/init.d/network-manager restart

赛斯因弗，回复“woodpecker”或者获得woodpecker下载链接。
智能触发器和auto js
virscan查毒报告：http://r.virscan.org/language/zh-cn/report/c4a13a06949471a8788a4b3219a7174d  哈勃分析系统：https://habo.qq.com/file/showdetail?pk=ADcGZ11oB2MIPVs6U2Y%3D
------------------------------temp------------------------
17楼wifi密码: usky05922226199@%2
15楼WiFi密码: 05922226199
svn账号密码: xiezh   ytkj@Xzh239@
svn://192.168.0.212/cdnrepo/02-code/gslb-analysis-api
svn://192.168.0.212/cdnrepo/02-code/py
svn://192.168.0.212/cdnrepo/01-docs/API/spm
svn://192.168.0.212/cdnrepo/02-code/spm-api
VPN: IP:117.30.209.252   username:uskydvpn    password:uskyipsec4ytkj
IP: 192.168.0.98  NetMask:255.255.255.0  Gateway:192.168.0.1  DNS: 192.168.0.214/1.1.1.1
spm地址: 
151数据库: mysql -uusky -pusky@123456
docker机: root  usky666!#%
堡垒机账号: xiezh  xiezhaoheng
mysql -h 103.118.36.210 -u usky -pusky@123456

数据库移植并初始化: 
python manage.py makemigrations --settings settings.prod
python manage.py migrate --settings settings.prod
python manage.py init_apis --settings settings.prod


---------------msp-------------
source /root/virtualenvs/msp/bin/activate && cd /usr/local/msp-api/bin/msp/

./deploy.sh --domain msp-api.uskycdn.com --env prod

python manage.py get_big_data_info --settings settings.prod

gunicorn -w 1 -b 0.0.0.0:9988 wsgi:application --access-logfile "/usr/local/gslb-msp-api/var/log/gunicorn-access.log" --error-logfile "/usr/local/gslb-msp-api/var/log/gunicorn-error.log" --log-level info --worker-class gevent

---------------spm-------------
python manage.py get_info --settings settings.prod

gunicorn -w 1 -b 0.0.0.0:9988 wsgi:application --access-logfile "/usr/local/spm-api/var/log/gunicorn-access.log" --error-logfile "/usr/local/spm-api/var/log/gunicorn-error.log" --log-level info --worker-class gevent

./deploy.sh --domain spm-api.uskycdn.com --env prod --dbhost 127.0.0.1
./deploy.sh --domain spm-api.uskycdn.com --env prod --dbhost mysql.spm.uskycdn.com

echo "" > /usr/local/spm-api/var/log/gunicorn-access.log && echo "" > /usr/local/spm-api/var/log/gunicorn-error.log && echo "" > /usr/local/spm-api/var/log/account.log && pkill -9 gunicorn; source /data/spm/bin/activate && cd /usr/local/spm-api/bin/spm/ && find ./ -name "*.pyc" | xargs rm; gunicorn -w 8 -b 0.0.0.0:9988 wsgi:application  --access-logfile /usr/local/spm-api/var/log/gunicorn-access.log --error-logfile /usr/local/spm-api/var/log/gunicorn-error.log --log-level info --worker-class gevent


mysqldump -uusky -pusky@123456 --no-create-info --tab=/tmp RUNOOB runoob_tbl
mysqldump -h 127.0.0.1 -uusky -pusky@123456 spm > /root/spm_new.sql

pip 安装pyzmq失败解决
yum install -y cpp make autoconf automake patch cmake wget mlocate rpm-build gcc-c++ uuid-devel pkgconfig libtool python-devel openpgm

LOAD DATA INFILE '/opt/IP2LOCATION-LITE-DB11.CSV' 
INTO TABLE ip2locations 
FIELDS TERMINATED BY ',' 
OPTIONALLY ENCLOSED BY '"' 
LINES TERMINATED BY '\n';

mysql -uroot -pusky@456321 --connect-expired-password -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'usky@456321';"

grant all privileges on *.* to 'usky'@'103.134.148.31' IDENTIFIED BY 'usky@123456';
FLUSH PRIVILEGES;

grant all privileges on *.*  to 'root'@'192.168.*.*'  identified by '123456' WITH GRANT OPTION;

GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'IDENTIFIED BY 'usky@123456' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'IDENTIFIED BY 'usky@456321' WITH GRANT OPTION;


echo "" > account.log; echo "" > deploy.log; echo "" > error.log; echo "" > exception.log; echo "" > gunicorn-access.log; echo "" > gunicorn-error.log; echo "" > gunicorn-supervisor-api.log; echo "" > gunicorn-supervisor-system.log; echo "" > insert_query_log.log ; echo "" > log-collect.log; echo "" > monitor.log; echo "" > start_get_big_data.log; echo "" > start_load_data.log; echo "" > system.log

apt-cache depends netease-cloud-music

rm -rf ./apps/account/migrations/ ./apps/monitor/migrations/ ./apps/query/migrations/ ./apps/system/migrations/
时间规划局+前目的地

python manage.py migrate --settings settings.prod
python manage.py makemigrations --settings settings.prod
python manage.py init_apis --settings settings.prod
source /data/spm/bin/activate && cd /usr/local/spm-api/bin/spm
./deploy.sh --domain msp-api.uskycdn.com --env prod
source /root/virtualenvs/msp/bin/activate && cd /usr/local/msp-api/bin/msp/




## 下载nodejs
网址 https://nodejs.org/zh-cn/, 将压缩包下载并解压到/opt路径下
$ sudo ln -s /opt/node-v10.16.3-linux-x64/bin/npm /usr/local/bin/npm
$ sudo ln -s /opt/node-v10.16.3-linux-x64/bin/node /usr/local/bin/node

## 安装gitbook
$ npm install gitbook-cli -g
$ sudo ln -s /opt/node-v10.16.3-linux-x64/bin/gitbook /usr/local/bin/gitbook

## 基本使用
1. $ gitbook init 初始化书籍目录
    README.md和SUMMARY.md是两个必须的文件, README.md是对书籍的简单介绍, SUMMARY.md是书籍的目录结构
2. $ gitbook serve 编译和预览书籍
    gitbook serve命令实际上会首先条用 gitbook build 编译书籍, 完成以后会打开一个web服务器, 监听在本地的4000端口


gh-pages 分支保存书籍编译后的 HTML 文件   github
coding-pages 分支保存书籍编译后的 HTML 文件


